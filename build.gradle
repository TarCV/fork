/*
 * Copyright 2015 Shazam Entertainment Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License.
 *
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
 */

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}

ext.sourceCompatibility = JavaVersion.VERSION_1_8
ext.targetCompatibility = JavaVersion.VERSION_1_8
ext.androidPlugin = '3.0.0'

def repos = {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url 'https://maven.google.com'
    }
}

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.0'
    }
}

allprojects {
    buildscript {
        repositories repos
    }
    repositories repos

    apply plugin: "java"
    apply plugin: "jacoco"

    version = VERSION_NAME
    group = GROUP

//    apply plugin: 'maven-publish'
    apply plugin: 'maven'
    apply plugin: 'signing'
}

subprojects {
    archivesBaseName = POM_ARTIFACT_ID

    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                pom.groupId = GROUP
                pom.version = VERSION_NAME

                repository(url: mavenLocal().url) {
                }

                snapshotRepository(url: mavenLocal().url) {
                }

                pom.project {
                    name POM_NAME
                    packaging POM_PACKAGING
                    description POM_DESCRIPTION
                    url POM_URL
/*
                scm {
                    url POM_SCM_URL
                    connection POM_SCM_CONNECTION
                    developerConnection POM_SCM_DEV_CONNECTION
                }
*/
                    licenses {
                        license {
                            name POM_LICENCE_NAME
                            url POM_LICENCE_URL
                            distribution POM_LICENCE_DIST
                        }
                    }

                    developers {
                        developer {
                            id POM_DEVELOPER_ID
                            name POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    afterEvaluate { currentProject ->
        [/*install.repositories.mavenInstaller,*/ uploadArchives.repositories.mavenDeployer]*.pom*.whenConfigured { pom ->
            pom.dependencies
                    .each { dep ->
                if (dep.groupId == 'com.github.tarcv.fork') {
                    dep.artifactId = project(":${dep.artifactId}").archivesBaseName
                }
            }
        }

        signing {
            required { false }
            sign configurations.archives
        }

        if (!isAndroidProject(currentProject)) {
            task javadocJar(type: Jar) {
                classifier = 'javadoc'
                from javadoc
            }

            task sourcesJar(type: Jar) {
                classifier = 'sources'
                from sourceSets.main.allSource
            }

            artifacts {
                archives javadocJar, sourcesJar
            }

            jacocoTestReport.dependsOn test
            jacocoTestReport.reports.html.enabled false
            jacocoTestReport.reports.xml.enabled true
        }

        // Weirdly archives are signed even if signing.required {false}, so also skipping task explicitly.
        // signArchives.onlyIf {!VERSION_NAME.endsWith("SNAPSHOT")}
    }
}

/*
task jacocoMergeExecutions(type: JacocoMerge, dependsOn: getTasksByName('jacocoTestReport', true)) {
    executionData fileTree(project.rootDir.absolutePath).include("** /build/jacoco/*.exec")
}

task jacocoMergedReport(type: JacocoReport, dependsOn: jacocoMergeExecutions) {
    executionData jacocoMergeExecutions.destinationFile
    sourceDirectories = files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories =  files(subprojects.sourceSets.main.output)
    reports {
        html.enabled false
        xml.enabled true
    }
}
*/
